System load Linux
----------------------
It includes several stages. The process must mount both file
systems: virtual and real, initialize devices, activate file
swap, check the main system files for integrity, mount any
partitions, including the swap partition, set the system clock, raise
network, start the daemons required by the system, and execute any other
custom tasks required by the user. This process should be
are organized to ensure that tasks are performed in the correct order, but
at the same time, do all this as quickly as possible.

System V
--------
System V - this is the classic boot method used on Unix and
Unix-like systems like Linux have been around since 1983. It consists of
a small init program that launches basic programs like
login (via getty) and scripts. These scripts, commonly referred to as rc scripts,
control the execution of a set of additional scripts that execute
tasks required to initialize the system.

The init program is controlled by the / etc / inittab file and is organized into levels
launches that can be performed by the user. Start level by
the default is usually 3 or 5
   0 -  halt
   1 -  single user mode
   2 -  multiuser, without networking
   3 -  full multiuser mode
   4 -  user definable
   5 -  full multiuser mode with display manager
   6 -  reboot

Benefits:
    - the system is easy to understand
    - easy to customize

disadvantages
   - slow loading. Average time for LFS ~ 8-12 seconds (load time
      measured from first kernel message to shell login prompt
      user)
   - sequential processing of boot tasks. Delay in any process
      such as checking the filesystem will delay the entire boot process
   - does not support advanced features such as cgroups
      (cgroups)
   - adding scripts requires a "manual" decision about their sequence
      launch

###
# The order of assembly of packages is in the order STRICTLY corresponding to the list in
# file ./queue
###

- copy the auxiliary scripts for building to the root of the LFS system (/mnt/lfs)
    ./check_environment.sh
    ./unpack_source_archive.sh
    ./write_to_var_log_packages.sh

- copy the assembly script <pkg_name.sh> to the root of the LFS system (/mnt/lfs/)

- go to the chroot environment
    # ./entering-chroot-env.sh

- run the build script
    # /pkg_name.sh

# vim:ft=conf
